generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password_hash String
  role_id       Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  role             Role?         @relation(fields: [role_id], references: [id])
  led_projects     Project[]     @relation("ProjectLead")
  project_users    ProjectUser[]
  assigned_issues  Issue[]       @relation("AssignedIssues")
  reported_issues  Issue[]       @relation("ReportedIssues")
  comments         Comment[]
  attachments      Attachment[]
  work_logs        WorkLog[]
  filters          Filter[]
  dashboards       Dashboard[]
  oauth_tokens     OAuthToken[]
  change_logs      ChangeLog[]
  component_leads  Component[]   @relation("ComponentLead")
  test_cases       TestCase[]
  test_executions  TestExecution[]
  default_assignees DefaultAssignee[]

  @@map("users")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  key         String   @unique
  description String?
  lead_user_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  lead         User           @relation("ProjectLead", fields: [lead_user_id], references: [id])
  users        ProjectUser[]
  issues       Issue[]
  sprints      Sprint[]
  versions     Version[]
  components   Component[]
  reports      Report[]
  workflows    Workflow[]
  integrations Integration[]
  permissions  Permission[]
  test_cases   TestCase[]
  default_assignees DefaultAssignee[]

  @@map("projects")
}

model ProjectUser {
  project_id Int
  user_id    Int
  role       String

  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([project_id, user_id])
  @@map("project_users")
}

model Issue {
  id           Int       @id @default(autoincrement())
  project_id   Int
  key          String    @unique
  summary      String
  description  String?
  type         String
  status       String
  priority     String?
  assignee_id  Int?
  reporter_id  Int
  epic_id      Int?
  story_points Int?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  due_date     DateTime?

  // Relations
  project         Project          @relation(fields: [project_id], references: [id], onDelete: Cascade)
  assignee        User?            @relation("AssignedIssues", fields: [assignee_id], references: [id])
  reporter        User             @relation("ReportedIssues", fields: [reporter_id], references: [id])
  epic            Issue?           @relation("EpicIssues", fields: [epic_id], references: [id])
  epic_issues     Issue[]          @relation("EpicIssues")
  comments        Comment[]
  attachments     Attachment[]
  work_logs       WorkLog[]
  sprint_issues   SprintIssue[]
  issue_versions  IssueVersion[]
  issue_components IssueComponent[]
  source_links    IssueLink[]      @relation("SourceIssue")
  target_links    IssueLink[]      @relation("TargetIssue")
  parent_subtasks SubTask[]        @relation("ParentIssue")
  child_subtasks  SubTask[]        @relation("ChildIssue")
  test_case_id    Int?
  test_case       TestCase?        @relation("TestCaseBugs", fields: [test_case_id], references: [id])
  test_cases      TestCase[]

  @@map("issues")
}

model IssueLink {
  id              Int      @id @default(autoincrement())
  source_issue_id Int
  target_issue_id Int
  link_type       String
  created_at      DateTime @default(now())

  source_issue Issue @relation("SourceIssue", fields: [source_issue_id], references: [id], onDelete: Cascade)
  target_issue Issue @relation("TargetIssue", fields: [target_issue_id], references: [id], onDelete: Cascade)

  @@unique([source_issue_id, target_issue_id, link_type])
  @@map("issue_links")
}

model SubTask {
  parent_issue_id Int
  sub_task_id     Int

  parent_issue Issue @relation("ParentIssue", fields: [parent_issue_id], references: [id], onDelete: Cascade)
  sub_task     Issue @relation("ChildIssue", fields: [sub_task_id], references: [id], onDelete: Cascade)

  @@id([parent_issue_id, sub_task_id])
  @@map("sub_tasks")
}

model Comment {
  id         Int      @id @default(autoincrement())
  issue_id   Int
  user_id    Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  issue Issue @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id         Int      @id @default(autoincrement())
  issue_id   Int
  user_id    Int
  filename   String
  file_path  String
  created_at DateTime @default(now())

  issue Issue @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Sprint {
  id         Int       @id @default(autoincrement())
  project_id Int
  name       String
  start_date DateTime?
  end_date   DateTime?
  status     String
  created_at DateTime  @default(now())

  project Project       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  issues  SprintIssue[]
  reports Report[]

  @@map("sprints")
}

model SprintIssue {
  sprint_id Int
  issue_id  Int

  sprint Sprint @relation(fields: [sprint_id], references: [id], onDelete: Cascade)
  issue  Issue  @relation(fields: [issue_id], references: [id], onDelete: Cascade)

  @@id([sprint_id, issue_id])
  @@map("sprint_issues")
}

model WorkLog {
  id         Int      @id @default(autoincrement())
  issue_id   Int
  user_id    Int
  time_spent Int
  comment    String?
  created_at DateTime @default(now())

  issue Issue @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("work_logs")
}

model Version {
  id           Int       @id @default(autoincrement())
  project_id   Int
  name         String
  description  String?
  release_date DateTime?
  created_at   DateTime  @default(now())

  project Project        @relation(fields: [project_id], references: [id], onDelete: Cascade)
  issues  IssueVersion[]

  @@map("versions")
}

model IssueVersion {
  issue_id   Int
  version_id Int
  type       String

  issue   Issue   @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  version Version @relation(fields: [version_id], references: [id], onDelete: Cascade)

  @@id([issue_id, version_id, type])
  @@map("issue_versions")
}

model Component {
  id           Int      @id @default(autoincrement())
  project_id   Int
  name         String
  description  String?
  lead_user_id Int?
  created_at   DateTime @default(now())

  project Project          @relation(fields: [project_id], references: [id], onDelete: Cascade)
  lead    User?            @relation("ComponentLead", fields: [lead_user_id], references: [id])
  issues  IssueComponent[]

  @@map("components")
}

model IssueComponent {
  issue_id     Int
  component_id Int

  issue     Issue     @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  component Component @relation(fields: [component_id], references: [id], onDelete: Cascade)

  @@id([issue_id, component_id])
  @@map("issue_components")
}

model Report {
  id         Int      @id @default(autoincrement())
  project_id Int
  sprint_id  Int?
  type       String
  data       Json
  created_at DateTime @default(now())

  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  sprint  Sprint? @relation(fields: [sprint_id], references: [id], onDelete: SetNull)

  @@map("reports")
}

model Filter {
  id         Int      @id @default(autoincrement())
  user_id    Int
  name       String
  query      String
  is_shared  Boolean  @default(false)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("filters")
}

model Dashboard {
  id          Int      @id @default(autoincrement())
  user_id     Int
  name        String
  description String?
  is_shared   Boolean  @default(false)
  created_at  DateTime @default(now())

  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  gadgets Gadget[]

  @@map("dashboards")
}

model Gadget {
  id            Int      @id @default(autoincrement())
  dashboard_id  Int
  type          String
  configuration Json
  position      Int
  created_at    DateTime @default(now())

  dashboard Dashboard @relation(fields: [dashboard_id], references: [id], onDelete: Cascade)

  @@map("gadgets")
}

model Permission {
  id         Int      @id @default(autoincrement())
  project_id Int?
  role       String
  permission String
  created_at DateTime @default(now())

  project Project? @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("permissions")
}

model Workflow {
  id          Int      @id @default(autoincrement())
  project_id  Int
  name        String
  description String?
  created_at  DateTime @default(now())

  project     Project              @relation(fields: [project_id], references: [id], onDelete: Cascade)
  transitions WorkflowTransition[]

  @@map("workflows")
}

model WorkflowTransition {
  id          Int      @id @default(autoincrement())
  workflow_id Int
  from_status String
  to_status   String
  created_at  DateTime @default(now())

  workflow Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@map("workflow_transitions")
}

model OAuthToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String
  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("oauth_tokens")
}

model Integration {
  id            Int      @id @default(autoincrement())
  project_id    Int
  type          String
  configuration Json
  created_at    DateTime @default(now())

  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model ChangeLog {
  id             Int      @id @default(autoincrement())
  entity_type    String
  entity_id      Int
  user_id        Int
  change_type    String
  change_details Json
  created_at     DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("change_logs")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id         Int      @id @default(autoincrement())
  role_id    Int
  permission String
  created_at DateTime @default(now())

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission])
  @@map("role_permissions")
}

model TestCase {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  steps           Json
  expected_result String
  project_id      Int
  issue_id        Int?
  priority        String   @default("Medium")
  status          String   @default("Active")
  created_by      Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  project    Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)
  issue      Issue?          @relation(fields: [issue_id], references: [id])
  creator    User            @relation(fields: [created_by], references: [id])
  executions TestExecution[]
  // Bugs created from this test case (reverse relation)
  bugs       Issue[]  @relation("TestCaseBugs")

  @@map("test_cases")
}

model TestExecution {
  id             Int      @id @default(autoincrement())
  test_case_id   Int
  executed_by    Int
  status         String
  actual_result  String
  notes          String?
  environment    String   @default("Development")
  executed_at    DateTime @default(now())

  test_case TestCase @relation(fields: [test_case_id], references: [id], onDelete: Cascade)
  executor  User     @relation(fields: [executed_by], references: [id])

  @@map("test_executions")
}

model DefaultAssignee {
  id         Int      @id @default(autoincrement())
  project_id Int
  issue_type String
  assignee_id Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project  Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  assignee User?   @relation(fields: [assignee_id], references: [id], onDelete: SetNull)

  @@unique([project_id, issue_type])
  @@map("default_assignees")
}
